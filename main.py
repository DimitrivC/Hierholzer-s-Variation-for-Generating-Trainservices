#!/usr/bin/env python
"""
main.py

This script serves as the main entry point for the application. It allows users to select 
data files, configure parameters for the algorithm, and execute the algorithm to generate
services. The results are then processed and visualized.

Modules:
    - classes.graph_class (as grc): Provides the Graph class for handling graph data.
    - hierholzer_variation: Contains the algorithm implementation.
    - helpers.clear: Provides a function to clear the console.
    - analysis: Contains functions to process and visualize results from the algorithm execution.

Usage:
    Run this script to start the application. Follow the on-screen instructions to 
    select data files and configure the algorithm parameters.
"""
from classes import graph_class as grc
import hierholzer_variation
from helpers import clear
from analysis import scores_to_csv, draw_bar_chart, draw_graph

def main_menu():
    """
    Main menu function to manage user input and run the algorithm.

    Initializes the graph object, collects user inputs for the maximum number 
    of tracks per service, maximum track time, and the number of services to 
    generate. It then runs the Hierholzer variation algorithm with the provided
    inputs and delivers the results.
    """
    graph = get_graph_object()

    max_track_number = get_input('maximum number of tracks per service', 1, 20)
    max_track_time = get_input('maximum track time', 1, 180)
    iteration = get_input('the number of services that should be generated', 5, 10000)

    services = hierholzer_variation.algo(graph, max_track_number, max_track_time, iteration)
    
    deliver_results(services, graph)

def get_graph_object():
    """
    Get the graph object based on the user's datafile selection.

    Presents a menu to the user to select datafiles for loading graph nodes and 
    edges. Based on the user's choice, it initializes and returns a Graph object
    with the corresponding nodes and edges.

    Returns:
        grc.Graph: A graph object initialized with the selected datafiles.
    """
    print('Datafiles menu\n')
    print('Please select the files you want to load')

    choice = '0'
    while choice == '0':
        print('1. North Holland')
        print('2. Netherlands')
        print('3. Middle-earth')
        choice = input(' >> ')
        clear()

        if choice == '1':
            nodes = './data/StationsNorthHolland.csv'
            edges = './data/ConnectionsNorthHolland.csv'
        elif choice == '2':
            nodes = './data/StationsNetherlands.csv'
            edges = './data/ConnectionsNetherlands.csv'
        elif choice == '3':
            nodes = './data/StationsMiddleEarth.csv'
            edges = './data/ConnectionsMiddleEarth.csv'
        else:
            print('Please select 1, 2, or 3!\n')
            choice = '0'

    return grc.Graph(nodes, edges)

def get_input(instructions, min_value, max_value):
    """
    Get user input for the maximum number of tracks per service, maximum track time,
    and the number of services to generate.

    Prompts the user for an integer input based on the provided instructions and
    ensures that the input is within the specified range.

    Parameters:
        instructions (str): The instructions to be displayed to the user.
        min_value (int): The minimum value that the user can input.
        max_value (int): The maximum value that the user can input.
    
    Returns:
        int: The validated user input.
    """ 
    user_input = 0
    while user_input == 0:
        try:
            user_input = int(input(f'Input {instructions} ({min_value} - {max_value}): '))
            if user_input < min_value or user_input > max_value:
                user_input = 0
                print(f'Please provide an integer between {min_value} and {max_value}!')
        except ValueError:
            print('Please provide a valid integer!')

    clear()
    return user_input

def deliver_results(services, graph):
    """
    Deliver the results of the algorithm execution to the user.

    Takes the generated services and the graph object, calculates the scores, 
    identifies the service with the highest score, and then saves the results 
    to a CSV file and generates visualizations.

    Parameters:
        services (list): The list of Service objects generated by the algorithm.
        graph (grc.Graph): The graph object used by the algorithm to generate the services.
    """
    file_path = './results/'
    scores = [service.score for service in services]
    best_service = max(services, key = lambda x: x.score)

    print(f'\n\nThe service with the highest score is service no. {services.index(best_service)\
    + 1} with a score of {best_service.score}\n')

    scores_to_csv(scores, file_path)
    draw_bar_chart(scores, file_path)
    draw_graph(best_service, graph, file_path)

if __name__ == '__main__':
    clear()
    main_menu()
